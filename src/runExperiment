#! /usr/bin/python3

import sys
import minimaxbot
import cubicTTT as ct
import randomBot as rb
import random
import csv
import time

# A basic shell python script to run experiments and 
# collect data into a standardized csv file to run statistical
# analysis on later in R (will be writing this script after I
# finish with this one)

# HOW TO RUN: run as follows:
# ./runExperiment [number] [N] [depth] [filename]

experNum = sys.argv[1]
trials = int(sys.argv[2])
depth = int(sys.argv[3])
filename = sys.argv[4]+".csv"

def exper1():
    print("Testing quickly who wins most, Random Bot verses Minimax Bot, and if play order matters")
    rbFirstWins = 0
    rbSecondWins = 0
    mmbFirstWins = 0
    mmbSecondWins = 0
    game = ct.CubicTicTacToe()

    # N trials with Random Bot going first, next N trials with 
    # minimax going first
    for i in range(0,trials):
        randomBot = rb.Random_Bot(game, 'X')
        mmb = minimaxbot.MinimaxBot('O', 'X', 2, 1)
        moves = 1
        while game.is_game_over == False:
            randomBot.play_random_move(game)
            if (game.is_game_over):
                break
            mmbMove = mmb.calculateTree(game, depth)
            game.make_move(mmb.piece, mmbMove[0], mmbMove[1])
            moves+=1
        winner = game.game_winner
        if winner == 'X':
            rbFirstWins+=1
        else:
            mmbSecondWins+=1

    for i in range(0,trials):
        mmb = minimaxbot.MinimaxBot('X', 'O', 1, 1)
        randomBot = rb.Random_Bot(game, 'O')
        moves = 1
        while game.is_game_over == False:
            mmbMove = mmb.calculateTree(game, depth)
            game.make_move(mmb.piece, mmbMove[0], mmbMove[1])
            if (game.is_game_over):
                break
            randomBot.play_random_move(game)
            moves+=1
        winner = game.game_winner
        if winner == 'X':
            mmbFirstWins+=1
        else:
            rbSecondWins+=1

    return [depth, rbFirstWins, rbSecondWins, mmbFirstWins, mmbSecondWins]

def exper2():
    print("Testing Minimax Bots our new heuristic verses the old heuristic.\n "+
                    "Timing between decisions is recorded as well and taken as an average")
    mmbNewFirstWins = 0
    mmbNewSecondWins = 0
    mmbOldFirstWins = 0
    mmbOldSecondWins = 0
    mmbNewAvgTimeFirst = 0
    mmbNewAvgTimeSecond = 0
    mmbOldAvgTimeFirst = 0
    mmbOldAvgTimeSecond = 0
    totalMovesNewFirst = 0
    totalMovesOldFirst = 0
    game = ct.CubicTicTacToe()

    for i in range(0, trials):
        mmbNew = minimaxbot.MinimaxBot('X', 'O', 1, 1)
        mmbOld = minimaxbot.MinimaxBot('O', 'X', 2, 0)
        moves = 1
        while game.is_game_over == False:
            t0 = time.time()
            mmbNewMove = mmbNew.calculateTree(game, depth)
            game.make_move(mmbNew.piece, mmbNewMove[0], mmbNewMove[1])
            t1 = time.time()
            mmbNewAvgTimeFirst+= (t1-t0)
            if (game.is_game_over):
                break
            t0 = time.time()
            mmbOldMove = mmbOld.calculateTree(game, depth)
            game.make_move(mmbOld.piece, mmbOldMove[0], mmbOldMove[1])
            t1 = time.time()
            mmbOldAvgTimeSecond += (t1-t0)
            moves +=1
        winner = game.game_winner
        if winner == 'X':
            mmbNewFirstWins+=1
        else:
            mmbOldSecondWins+=1
        totalMovesNewFirst+=moves

    for i in range(0, trials):
        mmbOld = minimaxbot.MinimaxBot('X', 'O', 1, 0)
        mmbNew = minimaxbot.MinimaxBot('O', 'X', 2, 1)
        moves = 1
        while game.is_game_over == False:
            t0 = time.time()
            mmbOldMove = mmbOld.calculateTree(game, depth)
            game.make_move(mmbOld.piece, mmbOldMove[0], mmbOldMove[1])
            t1 = time.time()
            mmbOldAvgTimeFirst += (t1-t0)
            if (game.is_game_over):
                break
            t0 = time.time()
            mmbNewMove = mmbNew.calculateTree(game, depth)
            game.make_move(mmbNew.piece, mmbNewMove[0], mmbNewMove[1])
            t1 = time.time()
            mmbNewAvgTimeSecond += (t1-t0)
            moves+=1
        winner = game.game_winner
        if winner == 'X':
            mmbOldFirstWins +=1
        else:
            mmbNewSecondWins +=1
        totalMovesOldFirst += moves
    oldFirstAvgTime = mmbOldAvgTimeFirst/totalMovesOldFirst
    oldSecondAvgTime = mmbOldAvgTimeSecond/totalMovesNewFirst
    newFirstAvgTime = mmbNewAvgTimeFirst/totalMovesNewFirst
    newSecondAvgTime = mmbNewAvgTimeSecond/totalMovesOldFirst
    return [depth, mmbOldFirstWins, oldFirstAvgTime, mmbOldSecondWins, oldSecondAvgTime, mmbNewFirstWins, 
                    newFirstAvgTime, mmbNewSecondWins, newSecondAvgTime]

def exper3():
    print("running experiment 3")

if __name__ == "__main__":
    if experNum == "1":
        # the case of our Minimax Bot vs. the Random Bot
        # we want to see how many wins MiniMax can achieve verses
        # a random stupid player at depth specified in commandline
        print("got in commandline: experiment type "+experNum+ ", depth "+ str(depth)+", with trials "+str(trials))
        data = exper1()
        fields = ['depth', 'Num of RB wins (first)', 'Num of RB wins (second)', 
                        'Num of Minimax Bot (first)', 'Num of Minimax Bot (second)']
        with open(filename, 'w') as csvfile:
            csvwriter = csv.writer(csvfile)
            csvwriter.writerow(fields)
            csvwriter.writerow(data)
        csvfile.close()
        

    elif experNum == "2":
        # The case of our Minimax bot verses another minimax bot,
        # How many wins at depth specified on commandline and how 
        # long does it take to learn and beat it?
        print("got in commandline: experiment type "+experNum+ ", depth "+ str(depth)+", with trials "+str(trials))
        data = exper2()
        fields = ['depth', "Minimax Old Heuristic (first)", "Old Heuristic Average Time per Move (first)", 
                        "Minimax Old Heuristic (second)",  "Old Heuristic Average Time per Move (second)", 
                        "Minimax New Heuristic (first)", "New Heuristic Average Time per Move (first)", 
                        "Minimax New Heuristic (second)",  "New Heuristic Average Time per Move (second)",]
        with open(filename, 'w') as csvfile:
            csvwriter = csv.writer(csvfile)
            csvwriter.writerow(fields)
            csvwriter.writerow(data)
        csvfile.close()

    elif experNum == "3":
        # The case of minimax verses random bot where we're looking
        # at how long it takes to make a move with depth x (specified 
        # in the commandline) on move y.
        print("got in commandline: experiment type "+experNum+ ", depth "+ str(depth)+", with trials "+str(trials))
        exper3()
