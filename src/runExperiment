#! /usr/bin/python3

import sys
import minimaxbot
import cubicTTT as ct
import randomBot as rb
import csv
import time

# A basic shell python script to run experiments and
# collect data into a standardized csv file to run statistical
# analysis on later in R (will be writing this script after I
# finish with this one)

# ----------------------------------------- HOW TO RUN? ------------------------------------------
# run as follows:
# ./runExperiment [number] [N] [depth] [filename without .csv extension] [concat file?]

# ------------------------------------ WHAT DO THE ARGS MEAN? ------------------------------------
# [number] the number of the experiment you're running. For a quick explaination of what each
# experiment is, please see the comments below and the corresponding google doc

# [N] the total sample size you want the script to perform

# [depth] the depth you're testing, the range we agreed on was 3 to 5, but there is no check for
# this, so you could very well just test more depths if your computer will allow you to do so

# [filename] The name of the file you want to create or concat to the end of. This script already
# makes it a .csv already, so the extension is not needed to specify anything. It adds the .csv
# extention to make it more compatible and readible later without converting the file.

# [concat file?] 0 or something else to specify if the tester wants the file to concat to the end
# of an already existing file. If the user wants to concat to the end of an already existing file
# have this value be 0. Otherwise if you're creating a new file have this as something OTHER THAN
# 0. If you're concating files, please BE CERTAIN you are only concating files for the same
# experiment, otherwise there will be errors when loading the final .cvs file and cause Susan a
# headache later.

experNum = sys.argv[1]
trials = int(sys.argv[2])
depth = int(sys.argv[3])
filename = sys.argv[4]+".csv"


def exper1():
    print("Testing quickly who wins most, Random Bot verses Minimax Bot, and if play order matters")
    rbFirstWins = 0
    rbSecondWins = 0
    mmbFirstWins = 0
    mmbSecondWins = 0
    tiesRB = 0
    tiesMM = 0
    # N trials with Random Bot going first, next N trials with
    # minimax going first
    for i in range(0,trials):
        game = ct.CubicTicTacToe()
        randomBot = rb.Random_Bot(game, 'X')
        mmb = minimaxbot.MinimaxBot('O', 'X', 2, 1)
        moves = 1
        while game.is_game_over == False:
            randomBot.play_random_move(game)
            if (game.is_game_over):
                break
            mmbMove = mmb.calculateTree(game, depth)
            game.make_move(mmb.piece, mmbMove[0], mmbMove[1])
            moves+=1
        winner = game.game_winner
        if winner == 'X':
            rbFirstWins+=1
        elif winner == 'O':
            mmbSecondWins+=1
        else:
            tiesRB += 1
        print(f'Finished game {i+1} of {trials} before swapping order.')

    for i in range(0,trials):
        game = ct.CubicTicTacToe()
        mmb = minimaxbot.MinimaxBot('X', 'O', 1, 1)
        randomBot = rb.Random_Bot(game, 'O')
        moves = 1
        while game.is_game_over == False:
            mmbMove = mmb.calculateTree(game, depth)
            game.make_move(mmb.piece, mmbMove[0], mmbMove[1])
            if (game.is_game_over):
                break
            randomBot.play_random_move(game)
            moves+=1
        winner = game.game_winner
        if winner == 'X':
            mmbFirstWins+=1
        elif winner == 'O':
            rbSecondWins+=1
        else:
            tiesMM += 1
        print(f'Finished game {i+1} of {trials} after swapping order.')

    return [depth, rbFirstWins, rbSecondWins, mmbFirstWins, mmbSecondWins, tiesRB, tiesMM]

def exper2():
    print("Testing Minimax Bots our new heuristic verses the old heuristic.\n "+
                    "Timing between decisions is recorded as well and taken as an average")
    # mmbNewFirstWins = 0
    # mmbNewSecondWins = 0
    # mmbOldFirstWins = 0
    # mmbOldSecondWins = 0
    # mmbNewAvgTimeFirst = 0
    # mmbNewAvgTimeSecond = 0
    # mmbOldAvgTimeFirst = 0
    # mmbOldAvgTimeSecond = 0
    # totalMovesNewFirst = 0
    # totalMovesOldFirst = 0
    data = []
    # First test, new Heuristic is going first
    for i in range(0, trials):
        game = ct.CubicTicTacToe()
        mmbNew = minimaxbot.MinimaxBot('X', 'O', 1, 1)
        mmbOld = minimaxbot.MinimaxBot('O', 'X', 2, 0)
        #moves = 1
        mmbNewMoves = 0
        mmbOldMoves = 0
        
        mmbNewTime = 0
        mmbOldTime = 0
        # mmbNewFirstWins = 0
        # mmbOldSecondWins = 0
        winnerText = ""
        while game.is_game_over == False:
            # get start times and end times before and after the call for mmb to pick next move
            t0 = time.time()
            mmbNewMove = mmbNew.calculateTree(game, depth)
            game.make_move(mmbNew.piece, mmbNewMove[0], mmbNewMove[1])
            t1 = time.time()
            # Not really an average, but rather a sum of all the time it takes for this bot to
            # run in total
            #mmbNewAvgTimeFirst+= (t1-t0)
            mmbNewTime += (t1 - t0)
            mmbNewMoves += 1
            if (game.is_game_over):
                break
            t0 = time.time()
            mmbOldMove = mmbOld.calculateTree(game, depth)
            game.make_move(mmbOld.piece, mmbOldMove[0], mmbOldMove[1])
            t1 = time.time()
            #mmbOldAvgTimeSecond += (t1-t0)
            mmbOldTime += (t1 - t0)
            mmbOldMoves += 1
            #moves +=1
        winner = game.game_winner
        # if winner == 'X':
        #     mmbNewFirstWins+=1
        # else:
        #     mmbOldSecondWins+=1
        if winner == 'X':
          winnerText = "new"
        elif winner == 'O':
          winnerText = "old"
        else:
          winnerText = "tie"
        # Adds the relevant data
        data.append([depth, mmbNewTime/mmbNewMoves, mmbOldTime/mmbOldMoves, winnerText, "new"])
        # Gets total number of how many moves are being run in total across all trials
        #totalMovesNewFirst+=moves
        print(f'Finished game {i+1} of {trials} before swapping order.')
        #data.append([depth, mmbNewFirstWins, mmbNewAvgTimeFirst])
        
    # Second test, old Heuristic is going first
    for i in range(0, trials):
        game = ct.CubicTicTacToe()
        mmbOld = minimaxbot.MinimaxBot('X', 'O', 1, 0)
        mmbNew = minimaxbot.MinimaxBot('O', 'X', 2, 1)
        #moves = 1
        mmbNewMoves = 0
        mmbOldMoves = 0
        
        mmbNewTime = 0
        mmbOldTime = 0
        # mmbNewSecondWins = 0
        # mmbOldFirstWins = 0
        winnerText = ""
        while game.is_game_over == False:
            t0 = time.time()
            mmbOldMove = mmbOld.calculateTree(game, depth)
            game.make_move(mmbOld.piece, mmbOldMove[0], mmbOldMove[1])
            t1 = time.time()
            #mmbOldAvgTimeFirst += (t1-t0)
            mmbOldTime += (t1 - t0)
            mmbOldMoves += 1
            if (game.is_game_over):
                break
            t0 = time.time()
            mmbNewMove = mmbNew.calculateTree(game, depth)
            game.make_move(mmbNew.piece, mmbNewMove[0], mmbNewMove[1])
            t1 = time.time()
            #mmbNewAvgTimeSecond += (t1-t0)
            mmbNewTime += (t1 - t0)
            mmbNewMoves += 1
            #moves+=1
        winner = game.game_winner
        # if winner == 'X':
        #     mmbOldFirstWins +=1
        # else:
        #     mmbNewSecondWins +=1
        if winner == 'X':
          winnerText = "old"
        elif winner == 'O':
          winnerText = "new"
        else:
          winnerText = "tie"
        # Adds the relevant data
        data.append([depth, mmbNewTime/mmbNewMoves, mmbOldTime/mmbOldMoves, winnerText, "old"])
        #totalMovesOldFirst += moves
        print(f'Finished game {i+1} of {trials} after swapping order.')

    # calculating the true average of the time it takes to run everything. Calculated as the sum
    # of all times divided by the total number of moves
    # oldFirstAvgTime = mmbOldAvgTimeFirst/totalMovesOldFirst
    # oldSecondAvgTime = mmbOldAvgTimeSecond/totalMovesNewFirst
    # newFirstAvgTime = mmbNewAvgTimeFirst/totalMovesNewFirst
    # newSecondAvgTime = mmbNewAvgTimeSecond/totalMovesOldFirst
    # return all the information into a single row/table that will be written to the final csv
    # file specified.
    return data
    #return [depth, mmbOldFirstWins, oldFirstAvgTime, mmbOldSecondWins, oldSecondAvgTime,
                    #mmbNewFirstWins, newFirstAvgTime, mmbNewSecondWins, newSecondAvgTime]

def exper3():
    print("Minimax bot verses Random bot again, how long does it take at depth "+ str(depth)+
                    "\ntake some y moves into the game. Goal: Check depth over a range of values")

    to_csv = []
    # to_csv has members that are the rows of the final csv file, they follow the following order
    # to maintain correctness in the final csv file
    # ["depth" "move number", "Going First", "Minimax Bot time to Make Move", "Winner"]

    # for the Winner field, if the winner is not decided yet, the value is 0.
    # If Random Bot wins, the value is -1
    # If Minimax Bot wins, the value is 1

    # For my own sanity, the "going first" label is 0 if Minimax is going first
    # and 1 if Random Bot is going first
    # Here, Minimax Bot is going first

    for i in range(0,trials):
        game = ct.CubicTicTacToe()
        first = 0

        mmb = minimaxbot.MinimaxBot('X', 'O', 1, 1)
        randomBot = rb.Random_Bot(game, 'O')
        moves = 1
        while game.is_game_over == False:
            t0 = time.time()
            mmbMove = mmb.calculateTree(game, depth)
            game.make_move(mmb.piece, mmbMove[0], mmbMove[1])
            t1 = time.time()
            moveTime = t1-t0
            if (game.is_game_over):
                to_csv.append([depth, moves, first, moveTime, game.game_winner])
                moveTime = 0
                break
            else:
                to_csv.append([depth, moves, first, moveTime, game.game_winner])
            randomBot.play_random_move(game)
            moves+=1
            moveTime = 0
        print(f'Finished game {i+1} of {trials} before swapping order.')

    # Random bot is going first
    for i in range(0,trials):
        game = ct.CubicTicTacToe()
        first = 1
        game = ct.CubicTicTacToe()
        randomBot = rb.Random_Bot(game, 'X')
        mmb = minimaxbot.MinimaxBot('O', 'X', 2, 1)
        moves = 1
        fin = False
        while game.is_game_over == False:
            randomBot.play_random_move(game)
            if (game.is_game_over):
                to_csv.append([depth, moves, first, moveTime, game.game_winner])
                break
            t0 = time.time()
            mmbMove = mmb.calculateTree(game, depth)
            game.make_move(mmb.piece, mmbMove[0], mmbMove[1])
            t1 = time.time()
            moveTime = t1-t0
            to_csv.append([depth, moves, first, moveTime, game.game_winner])
            moves+=1
            moveTime = 0
        print(f'Finished game {i+1} of {trials} after swapping order.')

    return to_csv

def exper4():
    print("Testing Minimax Bots our new heuristic verses the old heuristic.\n "+
                    "Recording pruning per move")
    data = []
    # First test, new Heuristic is going first
    for i in range(0, 5):
        game = ct.CubicTicTacToe()
        mmbNew = minimaxbot.MinimaxBot('X', 'O', 1, 1)
        mmbOld = minimaxbot.MinimaxBot('O', 'X', 2, 0)
        mmbNewMoves = 0
        mmbOldMoves = 0
        
        mmbNewTime = 0
        mmbOldTime = 0
        winnerText = ""
        while game.is_game_over == False:

            mmbNewMove = mmbNew.calculateTree(game, depth)
            game.make_move(mmbNew.piece, mmbNewMove[0], mmbNewMove[1])
            newPrune = mmbNew.count
            mmbNewMoves += 1
            if (game.is_game_over):
                break
            
            mmbOldMove = mmbOld.calculateTree(game, depth)
            game.make_move(mmbOld.piece, mmbOldMove[0], mmbOldMove[1])
            oldPrune = mmbOld.count
            mmbOldMoves += 1
            
            data.append([depth, mmbNewMoves, newPrune, oldPrune, "--", "new"])
        winner = game.game_winner
        if winner == 'X':
          winnerText = "new"
        elif winner == 'O':
          winnerText = "old"
        else:
          winnerText = "tie"
        # Adds the relevant data
        data.append([depth, 0, 0, 0, winnerText, "new"])
        print(f'Finished game {i+1} of 5 before swapping order.')
        
    # Second test, old Heuristic is going first
    for i in range(0, 5):
        game = ct.CubicTicTacToe()
        mmbOld = minimaxbot.MinimaxBot('X', 'O', 1, 0)
        mmbNew = minimaxbot.MinimaxBot('O', 'X', 2, 1)
        mmbNewMoves = 0
        mmbOldMoves = 0
        
        mmbNewTime = 0
        mmbOldTime = 0
        winnerText = ""
        while game.is_game_over == False:
            
            mmbOldMove = mmbOld.calculateTree(game, depth)
            game.make_move(mmbOld.piece, mmbOldMove[0], mmbOldMove[1])
            oldPrune = mmbOld.count
            mmbOldMoves += 1
            if (game.is_game_over):
                break
            
            mmbNewMove = mmbNew.calculateTree(game, depth)
            game.make_move(mmbNew.piece, mmbNewMove[0], mmbNewMove[1])
            newPrune = mmbNew.count
            mmbNewMoves += 1
            
            data.append([depth, mmbNewMoves, newPrune, oldPrune, "--", "old"])
        winner = game.game_winner
        if winner == 'X':
          winnerText = "old"
        elif winner == 'O':
          winnerText = "new"
        else:
          winnerText = "tie"
        # Adds the relevant data
        data.append([depth, 0, 0, 0, winnerText, "old"])
        print(f'Finished game {i+1} of 5 after swapping order.')
    # return all the information into a single row/table that will be written to the final csv
    # file specified.
    return data

def exper5(heuristic):
    print("Recording pruning for a heuristics vs random bot swapping order")
    rbFirstWins = 0
    rbSecondWins = 0
    mmbFirstWins = 0
    mmbSecondWins = 0
    tiesRB = 0
    tiesMM = 0
    data = []
    botText = ""
    if heuristic == 1:
      botText = "new"
    else:
      botText = "old"
    # N trials with Random Bot going first, next N trials with
    # minimax going first
    for i in range(0,30):
        game = ct.CubicTicTacToe()
        randomBot = rb.Random_Bot(game, 'X')
        mmb = minimaxbot.MinimaxBot('O', 'X', 2, heuristic)
        moves = 0
        while game.is_game_over == False:
            randomBot.play_random_move(game)
            if (game.is_game_over):
                break
            mmbMove = mmb.calculateTree(game, depth)
            game.make_move(mmb.piece, mmbMove[0], mmbMove[1])
            moves+=1
            prunes = mmb.count
            data.append([depth, moves, prunes, "--", botText, "RB"])
        winner = game.game_winner
        if winner == 'X':
            rbFirstWins+=1
        elif winner == 'O':
            mmbSecondWins+=1
        else:
            tiesRB += 1
        print(f'Finished game {i+1} of 30 before swapping order.')
        data.append([depth, 0, 0, winner, botText, "RB"])
    for i in range(0,30):
        game = ct.CubicTicTacToe()
        mmb = minimaxbot.MinimaxBot('X', 'O', 1, heuristic)
        randomBot = rb.Random_Bot(game, 'O')
        moves = 0
        while game.is_game_over == False:
            mmbMove = mmb.calculateTree(game, depth)
            game.make_move(mmb.piece, mmbMove[0], mmbMove[1])
            if (game.is_game_over):
                break
            randomBot.play_random_move(game)
            moves+=1
            prunes = mmb.count
            data.append([depth, moves, prunes, "--", botText, "MMB"])
        winner = game.game_winner
        if winner == 'X':
            mmbFirstWins+=1
        elif winner == 'O':
            rbSecondWins+=1
        else:
            tiesMM += 1
        print(f'Finished game {i+1} of 30 after swapping order.')
        data.append([depth, 0, 0, winner, botText, "MMB"])
    return data


if __name__ == "__main__":
    if sys.argv[5] == '0':
        openType = 'a'
    else:
        openType = 'w'

    if experNum == "1":
        # the case of our Minimax Bot vs. the Random Bot
        # we want to see how many wins MiniMax can achieve verses
        # a random stupid player at depth specified in commandline
        print("got in commandline: experiment type "+experNum+ ", depth "+ str(depth)+", with "
                    +"trials "+str(trials)+", and concat "+sys.argv[5])
        data = exper1()
        fields = ['depth', 'Num of RB wins (first)', 'Num of RB wins (second)',
                        'Num of Minimax wins (first)', 'Num of Minimax wins (second)',
                        'Num of ties (RB first)', 'Num of ties (Minimax first)']
        with open(filename, openType) as csvfile:
            csvwriter = csv.writer(csvfile)
            if sys.argv[5] != '0':
                csvwriter.writerow(fields)
            csvwriter.writerow(data)
        csvfile.close()


    elif experNum == "2":
        # The case of our Minimax bot verses another minimax bot,
        # How many wins at depth specified on commandline and how
        # long does it take to learn and beat it?
        print("got in commandline: experiment type "+experNum+ ", depth "+ str(depth)+", with "
                    +"trials "+str(trials)+", and concat "+sys.argv[5])
        data = exper2()
        # fields = ['depth', "Minimax Old Heuristic (first)",
        #                 "Old Heuristic Average Time per Move (first)",
        #                 "Minimax Old Heuristic (second)",
        #                 "Old Heuristic Average Time per Move (second)",
        #                 "Minimax New Heuristic (first)",
        #                 "New Heuristic Average Time per Move (first)",
        #                 "Minimax New Heuristic (second)",
        #                 "New Heuristic Average Time per Move (second)",]
        fields = ['depth', 'Minimax NewHeur Avg Time', 'Minimax OldHeur Avg Time', 'Winner', 'Who First']
        with open(filename, openType) as csvfile:
            csvwriter = csv.writer(csvfile)
            if sys.argv[5] != '0':
                csvwriter.writerow(fields)
            #csvwriter.writerow(data)
            for row in data:
              csvwriter.writerow(row)
        csvfile.close()

    elif experNum == "3":
        # The case of minimax verses random bot where we're looking
        # at how long it takes to make a move with depth x (specified
        # in the commandline) on move y.
        print("got in commandline: experiment type "+experNum+ ", depth "+ str(depth)+", with "
                    +"trials "+str(trials)+", and concat "+sys.argv[5])
        data = exper3()
        fields = ["depth", "move number", "Going First", "Minimax Bot time to Make Move", "Winner"]
        with open(filename, openType) as csvfile:
            csvwriter = csv.writer(csvfile)
            if sys.argv[5] != '0':
                csvwriter.writerow(fields)
            csvwriter.writerows(data)
        csvfile.close()
    
    elif experNum == "4":
      # Pruning for 5 trials
      print("got in commandline: experiment type "+experNum)
      data = exper4()
      fields = ["depth", "move number", "Minimax NewHeur Prunings", "Minimax OldHeur Prunings", "Winner", "Who First"]
      with open(filename, openType) as csvfile:
            csvwriter = csv.writer(csvfile)
            csvwriter.writerow(fields)
            csvwriter.writerows(data)
      csvfile.close()
      
    elif experNum == "5":
      # Pruning for 30 trials vs random
      print("got in commandline: experiment type "+experNum)
      data = exper5(1)
      fields = ["depth", "move number", "Prunings", "Winner", "Which Heur", "Who First"]
      data2 = exper5(2)
      with open(filename, openType) as csvfile:
            csvwriter = csv.writer(csvfile)
            csvwriter.writerow(fields)
            csvwriter.writerows(data)
            csvwriter.writerows(data2)
      csvfile.close()
      
      
      
      
      
      
      
      
      